#include <conio.h>
#include <graphics.h>
#include <iostream>

#define round(a) ((int)(a + 0.5))

using namespace std;

int k;
int xmin, ymin, xmax, ymax, arr[20], m;

// This function clips the polygon from left
void clipl(int x1, int y1, int x2, int y2) {
    if (x2 - x1)
        m = (y2 - y1) / (x2 - x1);
    else
        m = 100000;  // some large number instead of infinity

    // if both are on right side of xmin
    if (x1 >= xmin && x2 >= xmin) {
        arr[k] = x2;
        arr[k + 1] = y2;
        k += 2;
    }

    // if only x2 is on right side of xmin
    if (x1 < xmin && x2 >= xmin) {
        arr[k] = xmin;
        arr[k + 1] = y1 + m * (xmin - x1);
        arr[k + 2] = x2;
        arr[k + 3] = y2;
        k += 4;
    }


      // if only x1 is on right side of xmin
    if (x1 >= xmin && x2 < xmin) {
        arr[k] = xmin;
        arr[k + 1] = y1 + m * (xmin - x1);
        k += 2;
    }
        /*
    // if only x1 is on right side of xmin
    if (x1 >= xmin && x2 < xmin) {
        arr[k] = xmin;
        arr[k + 1] = y1 + m * (xmin - x1);
        k += 2;
        // Changed here

        //arr[k+2]=x2;
        //k += 4;
    } */
}

// This function clips the polygon from top
void clipt(int x1, int y1, int x2, int y2) {
    if (y2 - y1)
        m = (x2 - x1) / (y2 - y1);
    else
        m = 100000;  // some large number instead of infinity

    // if both y1 and y2 are above ymax
    if (y1 <= ymax && y2 <= ymax) {
        arr[k] = x2;
        arr[k + 1] = y2;
        k += 2;
    }

    // if only y2 is above ymax
    if (y1 > ymax && y2 <= ymax) {
        arr[k] = x1 + m * (ymax - y1);
        arr[k + 1] = ymax;
        arr[k + 2] = x2;
        arr[k + 3] = y2;
        k += 4;
    }

    // if only y1 is above ymax
    if (y1 <= ymax && y2 > ymax) {
        arr[k] = x1 + m * (ymax - y1);
        arr[k + 1] = ymax;
        k += 2;
    }
}

// This function clips everything on right side of polygon
void clipr(int x1, int y1, int x2, int y2) {
    if (x2 - x1)
        m = (y2 - y1) / (x2 - x1);
    else
        m = 100000;  // some large number instead of infinity

    // if only x1 is on left side of xmax
    if (x1 <= xmax && x2 <= xmax) {
        arr[k] = x2;
        arr[k + 1] = y2;
        k += 2;
    }

    // if only x2 is on left side of xmax
    if (x1 > xmax && x2 <= xmax) {
        arr[k] = xmax;
        arr[k + 1] = y1 + m * (xmax - x1);
        arr[k + 2] = x2;
        arr[k + 3] = y2;
        k += 4;
    }

    // if only x1 is on left side of xmax
    if (x1 <= xmax && x2 > xmax) {
        arr[k] = xmax;
        arr[k + 1] = y1 + m * (xmax - x1);
        k += 2;
    }
}

// This function clips everything on bottom side of polygon
void clipb(int x1, int y1, int x2, int y2) {
    if (y2 - y1)
        m = (x2 - x1) / (y2 - y1);
    else
        m = 100000;  // some large number instead of infinity


    // if both y1 and y2 are below ymin
    if (y1 >= ymin && y2 >= ymin) {
        arr[k] = x2;
        arr[k + 1] = y2;
        k += 2;
    }

    // if only y2 is below ymin
    if (y1 < ymin && y2 >= ymin) {
        arr[k] = x1 + m * (ymin - y1);
        arr[k + 1] = ymin;
        arr[k + 2] = x2;
        arr[k + 3] = y2;
        k += 4;
    }

    // if only y1 is below ymin
    if (y1 >= ymin && y2 < ymin) {
        arr[k] = x1 + m * (ymin - y1);
        arr[k + 1] = ymin;
        k += 2;
    }
}

int main() {
    int gdriver = DETECT, gmode, n, poly[20];
    initgraph(&gdriver, &gmode, " ");

    int polyy[20];
    // clear();

    // Setting the clipping window coordinates
    xmin = ymin = 200;
    xmax = ymax = 400;

    // -------------------------------------------------------------------------------------------------------
    // Taking User input
    cout << "Number of sides: ";
    cin >> n;

    cout << "Enter the coordinates :";
    int i;
    for (i = 0; i < 2 * n; i++)
        cin >> polyy[i];
    cleardevice();
    // -------------------------------------------------------------------------------------------------------

    polyy[i] = polyy[0];
    polyy[i + 1] = polyy[1];

    for (i = 0; i < 2 * n + 2; i++)
        poly[i] = round(polyy[i]);

    // -------------------------------------------------------------------------------------------------------
    // Draw the clipping window
    setcolor(RED);
    rectangle(xmin, ymax, xmax, ymin);

    cout << "\t\tUNCLIPPED POLYGON";
    setcolor(WHITE);
    fillpoly(n, poly);
    getch();
    cleardevice();

    // -------------------------------------------------------------------------------------------------------
    // Left Clipping
    k = 0;
    for (i = 0; i < 2 * n; i += 2)
        clipl(polyy[i], polyy[i + 1], polyy[i + 2], polyy[i + 3]);
    n = k / 2;
    for (i = 0; i < k; i++)
        polyy[i] = arr[i];
    polyy[i] = polyy[0];
    polyy[i + 1] = polyy[1];
    // -------------------------------------------------------------------------------------------------------

    // -------------------------------------------------------------------------------------------------------
    // Top clipping
    k = 0;
    for (i = 0; i < 2 * n; i += 2)
        clipt(polyy[i], polyy[i + 1], polyy[i + 2], polyy[i + 3]);
    n = k / 2;
    for (i = 0; i < k; i++)
        polyy[i] = arr[i];
    polyy[i] = polyy[0];
    polyy[i + 1] = polyy[1];
    // -------------------------------------------------------------------------------------------------------

    // -------------------------------------------------------------------------------------------------------
    // Right Clipping
    k = 0;
    for (i = 0; i < 2 * n; i += 2)
        clipr(polyy[i], polyy[i + 1], polyy[i + 2], polyy[i + 3]);
    n = k / 2;
    for (i = 0; i < k; i++)
        polyy[i] = arr[i];
    polyy[i] = polyy[0];
    polyy[i + 1] = polyy[1];
    // -------------------------------------------------------------------------------------------------------

    // -------------------------------------------------------------------------------------------------------
    // Bottom Clipping
    k = 0;
    for (i = 0; i < 2 * n; i += 2)
        clipb(polyy[i], polyy[i + 1], polyy[i + 2], polyy[i + 3]);
    for (i = 0; i < k; i++)
        poly[i] = round(arr[i]);
    if (k)
        fillpoly(k / 2, poly);
    // -------------------------------------------------------------------------------------------------------

    setcolor(RED);
    rectangle(xmin, ymax, xmax, ymin);
    cout << "\tCLIPPED POLYGON";

    getch();
    closegraph();
    return 0;
}
