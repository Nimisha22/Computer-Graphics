#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <graphics.h>

struct point {
    int x, y;

    point(){x = y = 0;}

    point(int _x, int _y){
        x = _x;
        y = _y;
    }

    point(point *p){
        x = p->x;
        y = p->y;
    }
};

struct node {
    point *val;
    node *next;
};


struct queue {
    point* points;
    node *head, *tail;
    int len;

    friend void display(queue*);

    queue(){
        len = 0;
        head = tail = (node*) NULL;
    }

    void enqueue(int x, int y) {
        if(head == NULL) {
            // head = (node*) malloc(sizeof(node));
            head = new node;
            if(head == NULL){
                printf("Failed to allocate memory for head\n");
                return;
            }
            head->val = new point;

            head->val->x = x;
            head->val->y = y;
            head->next = NULL;

            tail = head;
        }

        else {
            // tail->next = (node*) malloc(sizeof(node));
            tail->next = new node;
            if(tail == NULL){
                printf("Failed to allocate memory for tail\nLength of queue is %d\n", len);
                getch();
                exit(1);
            }

            tail = tail->next;
            tail->val = new point;
            tail->val->x = x;
            tail->val->y = y;
        }

        len++;
    }

    point dequeue() {
        if(head == NULL) {
            printf("Queue underflow\n");
            return point(-1, -1);
        }

        node* temp = head;
        point first = head->val;
        head = head->next;

        delete temp->val;
        delete temp;
        // free(temp);

        // if there was only one element in ll and we deleted it
        // so tail should also be set to null
        if(head == NULL)
            tail = NULL;

        len--;
        return first;
    }
};

void display(queue *q){
    for (int i = 0; i < q->len; i++)
        printf("(%d, %d) <-> ", q->points[i].x, q->points[i].y);

    printf("\n\n");
}

void bound(int x, int y, int border, int replacement){
    queue q;
    q.enqueue(x, y);

    // for(int i = 0; i < 100; i++)
    // while(q.len > 0)
    while(q.head != NULL) {
        // display(&q);
        point p(q.dequeue());

        if(getpixel(p.x, p.y) != border && getpixel(p.x, p.y) != replacement){
            putpixel(p.x, p.y, replacement);

            if(getpixel(p.x - 1, p.y) != replacement)
                q.enqueue(p.x - 1, p.y);
            if(getpixel(p.x + 1, p.y) != replacement)
                q.enqueue(p.x + 1, p.y);
            if(getpixel(p.x, p.y - 1) != replacement)
                q.enqueue(p.x, p.y - 1);
            if(getpixel(p.x, p.y + 1) != replacement)
                q.enqueue(p.x, p.y + 1);
                
            /*q.enqueue(p.x - 1, p.y);
            q.enqueue(p.x + 1, p.y);
            q.enqueue(p.x, p.y - 1);
            q.enqueue(p.x, p.y + 1);
            */
        }
    }

    // if(getpixel(x, y) != border){
    //     putpixel(x, y, replacement);

    //     bound(x - 1, y, border, replacement);
    //     bound(x + 1, y, border, replacement);
    //     bound(x, y + 1, border, replacement);
    //     bound(x, y - 1, border, replacement);
    // 
    }
}

int evenodd(int sx, int sy) {
    int counter = 0;
    for(int I = 0; I < sx; I++) {
        if(getpixel(I, sy) != getbkcolor())
            counter++;
    }
    return counter;
}


int main(){
    int gd = DETECT, gm;
    initgraph(&gd, &gm, " ");
    int seedx, seedy;
    int n;
    printf("Enter number of vertices");
    scanf("%d", &n);
    int points[n][2];

    for(int i = 0; i < n; i++) {
        printf("Enter vertices %d ", i+1);
        scanf("%d %d", &points[i][0], &points[i][1]);
    }

    for(int i = 0; i < n-1; i++) {
        line(points[i][0], points[i][1], points[i+1][0], points[i+1][1]);
    }
    line(points[n-1][0], points[n-1][1], points[0][0], points[0][1]);
    // rectangle(20, 20, 50, 50);
    // rectangle(20, 20, 200, 200);
    // getch();

    // bound(21, 21, WHITE, RED);
    printf("Enter seed point ");
    scanf("%d %d", &seedx, &seedy);
    if(evenodd(seedx, seedy) % 2 == 1) {
        bound(seedx, seedy, WHITE, YELLOW);
    }
    else{
        printf("Seed point lies outside the polygon");
    }

    getch();

    closegraph();
    return 0;
}
